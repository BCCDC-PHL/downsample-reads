manifest {
    author = 'Dan Fornika'
    name = 'BCCDC-PHL/downsample-reads'
    version = '0.1.0'
    description = 'Downsample Reads'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
}

params {
    illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    long_read_suffixes = ['*_RL', '*_L']
    fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
    fastq_search_path = makeFastqSearchPath(illumina_suffixes, fastq_exts)
    fastq_input = 'NO_FILE'
    samplesheet_input = 'NO_FILE'
    coverages = 'NO_FILE'
    coverage = 30
    genome_size = '5m'
}

def makeFastqSearchPath(illumina_suffixes, fastq_exts) {
    def fastq_search_path = []
    if (params.fastq_input.toString() != 'NO_FILE') {
        for (suffix in illumina_suffixes) {
            for (ext in fastq_exts) {
                fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
            }
	}
    }
    return fastq_search_path
}

def makeLongReadsSearchPath(long_read_suffixes, fastq_exts) {
    def fastq_search_path = []
    if (params.fastq_input_long.toString() != 'NO_FILE') {
        for (suffix in long_read_suffixes) {
            for (ext in fastq_exts) {
                fastq_search_path.add(params.fastq_input_long.toString() + '/' + suffix.toString() + ext.toString())
	    }
        }
    }
    return fastq_search_path
}

profiles {
  conda {
    process.conda = "$baseDir/environments/environment.yml"
    if (params.cache){
     conda.cacheDir = params.cache
    }
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  withName: fastp {
    cpus = 4
  }
}

